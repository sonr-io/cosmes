// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/state.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Authentication is the authentication method to be used by the DID.
 *
 * @generated from message did.v1.Authentication
 */
export class Authentication extends Message<Authentication> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * AssertionType is the assertion type
   *
   * @generated from field: string did_type = 5;
   */
  didType = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Authentication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Authentication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Authentication {
    return new Authentication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Authentication {
    return new Authentication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Authentication {
    return new Authentication().fromJsonString(jsonString, options);
  }

  static equals(a: Authentication | PlainMessage<Authentication> | undefined, b: Authentication | PlainMessage<Authentication> | undefined): boolean {
    return proto3.util.equals(Authentication, a, b);
  }
}

/**
 * Assertion is the assertion method to be used by the DID.
 *
 * @generated from message did.v1.Assertion
 */
export class Assertion extends Message<Assertion> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * DIDType is the DID type
   *
   * @generated from field: string did_type = 5;
   */
  didType = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Assertion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Assertion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Assertion {
    return new Assertion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Assertion {
    return new Assertion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Assertion {
    return new Assertion().fromJsonString(jsonString, options);
  }

  static equals(a: Assertion | PlainMessage<Assertion> | undefined, b: Assertion | PlainMessage<Assertion> | undefined): boolean {
    return proto3.util.equals(Assertion, a, b);
  }
}

/**
 * Controller is the controller method to be used by the DID.
 *
 * @generated from message did.v1.Controller
 */
export class Controller extends Message<Controller> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * DIDType is the DID type
   *
   * @generated from field: string did_type = 5;
   */
  didType = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Controller>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Controller";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Controller {
    return new Controller().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Controller {
    return new Controller().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Controller {
    return new Controller().fromJsonString(jsonString, options);
  }

  static equals(a: Controller | PlainMessage<Controller> | undefined, b: Controller | PlainMessage<Controller> | undefined): boolean {
    return proto3.util.equals(Controller, a, b);
  }
}

/**
 * Delegation is usually an external blockchain account that is used to sign
 * transactions on behalf of the DID
 *
 * @generated from message did.v1.Delegation
 */
export class Delegation extends Message<Delegation> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * DIDType is the DID type
   *
   * @generated from field: string did_type = 5;
   */
  didType = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Delegation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Delegation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Delegation {
    return new Delegation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Delegation {
    return new Delegation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Delegation {
    return new Delegation().fromJsonString(jsonString, options);
  }

  static equals(a: Delegation | PlainMessage<Delegation> | undefined, b: Delegation | PlainMessage<Delegation> | undefined): boolean {
    return proto3.util.equals(Delegation, a, b);
  }
}

/**
 * Invocation is usually a smart contract that is used to sign transactions on
 * behalf of the DID
 *
 * @generated from message did.v1.Invocation
 */
export class Invocation extends Message<Invocation> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_base64 = 4;
   */
  publicKeyBase64 = "";

  /**
   * DIDType is the DID type
   *
   * @generated from field: string did_type = 5;
   */
  didType = "";

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 6;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Invocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Invocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "did_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Invocation {
    return new Invocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Invocation {
    return new Invocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Invocation {
    return new Invocation().fromJsonString(jsonString, options);
  }

  static equals(a: Invocation | PlainMessage<Invocation> | undefined, b: Invocation | PlainMessage<Invocation> | undefined): boolean {
    return proto3.util.equals(Invocation, a, b);
  }
}

