// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/tx.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Document, Params, VerificationMethod } from "./genesis_pb.js";

/**
 * MsgRegisterController is the message type for the RegisterController RPC.
 *
 * @generated from message did.v1.MsgRegisterController
 */
export class MsgRegisterController extends Message<MsgRegisterController> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: did.v1.VerificationMethod authentication_credential = 2;
   */
  authenticationCredential?: VerificationMethod;

  /**
   * @generated from field: did.v1.VerificationMethod assertion_dwn = 3;
   */
  assertionDwn?: VerificationMethod;

  /**
   * @generated from field: did.v1.VerificationMethod invocation_dwn = 4;
   */
  invocationDwn?: VerificationMethod;

  constructor(data?: PartialMessage<MsgRegisterController>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgRegisterController";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authentication_credential", kind: "message", T: VerificationMethod },
    { no: 3, name: "assertion_dwn", kind: "message", T: VerificationMethod },
    { no: 4, name: "invocation_dwn", kind: "message", T: VerificationMethod },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterController {
    return new MsgRegisterController().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterController {
    return new MsgRegisterController().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterController {
    return new MsgRegisterController().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterController | PlainMessage<MsgRegisterController> | undefined, b: MsgRegisterController | PlainMessage<MsgRegisterController> | undefined): boolean {
    return proto3.util.equals(MsgRegisterController, a, b);
  }
}

/**
 * MsgRegisterControllerResponse is the response type for the
 * RegisterController RPC.
 *
 * @generated from message did.v1.MsgRegisterControllerResponse
 */
export class MsgRegisterControllerResponse extends Message<MsgRegisterControllerResponse> {
  /**
   * @generated from field: string cid = 1;
   */
  cid = "";

  /**
   * @generated from field: string did = 2;
   */
  did = "";

  /**
   * @generated from field: map<string, string> accounts = 3;
   */
  accounts: { [key: string]: string } = {};

  constructor(data?: PartialMessage<MsgRegisterControllerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgRegisterControllerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "accounts", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterControllerResponse {
    return new MsgRegisterControllerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterControllerResponse {
    return new MsgRegisterControllerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterControllerResponse {
    return new MsgRegisterControllerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterControllerResponse | PlainMessage<MsgRegisterControllerResponse> | undefined, b: MsgRegisterControllerResponse | PlainMessage<MsgRegisterControllerResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterControllerResponse, a, b);
  }
}

/**
 * MsgLinkVerificationMethod is the message type for the LinkVerificationMethod RPC.
 *
 * @generated from message did.v1.MsgLinkVerificationMethod
 */
export class MsgLinkVerificationMethod extends Message<MsgLinkVerificationMethod> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * @generated from field: repeated did.v1.VerificationMethod authentication = 3;
   */
  authentication: VerificationMethod[] = [];

  /**
   * @generated from field: repeated did.v1.VerificationMethod assertion = 4;
   */
  assertion: VerificationMethod[] = [];

  /**
   * @generated from field: repeated did.v1.VerificationMethod delegation = 5;
   */
  delegation: VerificationMethod[] = [];

  /**
   * @generated from field: repeated did.v1.VerificationMethod invocation = 6;
   */
  invocation: VerificationMethod[] = [];

  constructor(data?: PartialMessage<MsgLinkVerificationMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgLinkVerificationMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "authentication", kind: "message", T: VerificationMethod, repeated: true },
    { no: 4, name: "assertion", kind: "message", T: VerificationMethod, repeated: true },
    { no: 5, name: "delegation", kind: "message", T: VerificationMethod, repeated: true },
    { no: 6, name: "invocation", kind: "message", T: VerificationMethod, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLinkVerificationMethod {
    return new MsgLinkVerificationMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLinkVerificationMethod {
    return new MsgLinkVerificationMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLinkVerificationMethod {
    return new MsgLinkVerificationMethod().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLinkVerificationMethod | PlainMessage<MsgLinkVerificationMethod> | undefined, b: MsgLinkVerificationMethod | PlainMessage<MsgLinkVerificationMethod> | undefined): boolean {
    return proto3.util.equals(MsgLinkVerificationMethod, a, b);
  }
}

/**
 * MsgLinkVerificationMethodResponse is the response type for the
 * LinkVerificationMethod RPC.
 *
 * @generated from message did.v1.MsgLinkVerificationMethodResponse
 */
export class MsgLinkVerificationMethodResponse extends Message<MsgLinkVerificationMethodResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: did.v1.Document document = 2;
   */
  document?: Document;

  constructor(data?: PartialMessage<MsgLinkVerificationMethodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgLinkVerificationMethodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "document", kind: "message", T: Document },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLinkVerificationMethodResponse {
    return new MsgLinkVerificationMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLinkVerificationMethodResponse {
    return new MsgLinkVerificationMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLinkVerificationMethodResponse {
    return new MsgLinkVerificationMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLinkVerificationMethodResponse | PlainMessage<MsgLinkVerificationMethodResponse> | undefined, b: MsgLinkVerificationMethodResponse | PlainMessage<MsgLinkVerificationMethodResponse> | undefined): boolean {
    return proto3.util.equals(MsgLinkVerificationMethodResponse, a, b);
  }
}

/**
 * MsgUnlinkVerificationMethod is the message type for the UnlinkVerificationMethod RPC.
 *
 * @generated from message did.v1.MsgUnlinkVerificationMethod
 */
export class MsgUnlinkVerificationMethod extends Message<MsgUnlinkVerificationMethod> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * @generated from field: repeated string authentication = 3;
   */
  authentication: string[] = [];

  /**
   * @generated from field: repeated string assertion = 4;
   */
  assertion: string[] = [];

  /**
   * @generated from field: repeated string delegation = 5;
   */
  delegation: string[] = [];

  /**
   * @generated from field: repeated string invocation = 6;
   */
  invocation: string[] = [];

  constructor(data?: PartialMessage<MsgUnlinkVerificationMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUnlinkVerificationMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "authentication", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "assertion", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "delegation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "invocation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlinkVerificationMethod {
    return new MsgUnlinkVerificationMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlinkVerificationMethod {
    return new MsgUnlinkVerificationMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlinkVerificationMethod {
    return new MsgUnlinkVerificationMethod().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlinkVerificationMethod | PlainMessage<MsgUnlinkVerificationMethod> | undefined, b: MsgUnlinkVerificationMethod | PlainMessage<MsgUnlinkVerificationMethod> | undefined): boolean {
    return proto3.util.equals(MsgUnlinkVerificationMethod, a, b);
  }
}

/**
 * MsgUnlinkVerificationMethodResponse is the response type for the
 * UnlinkVerificationMethod RPC.
 *
 * @generated from message did.v1.MsgUnlinkVerificationMethodResponse
 */
export class MsgUnlinkVerificationMethodResponse extends Message<MsgUnlinkVerificationMethodResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: did.v1.Document document = 2;
   */
  document?: Document;

  constructor(data?: PartialMessage<MsgUnlinkVerificationMethodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUnlinkVerificationMethodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "document", kind: "message", T: Document },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlinkVerificationMethodResponse {
    return new MsgUnlinkVerificationMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlinkVerificationMethodResponse {
    return new MsgUnlinkVerificationMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlinkVerificationMethodResponse {
    return new MsgUnlinkVerificationMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlinkVerificationMethodResponse | PlainMessage<MsgUnlinkVerificationMethodResponse> | undefined, b: MsgUnlinkVerificationMethodResponse | PlainMessage<MsgUnlinkVerificationMethodResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnlinkVerificationMethodResponse, a, b);
  }
}

/**
 * MsgExecuteTx is the message type for the ExecuteTx RPC.
 *
 * @generated from message did.v1.MsgExecuteTx
 */
export class MsgExecuteTx extends Message<MsgExecuteTx> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: map<string, bytes> messages = 2;
   */
  messages: { [key: string]: Uint8Array } = {};

  /**
   * @generated from field: string macaroon_token = 3;
   */
  macaroonToken = "";

  constructor(data?: PartialMessage<MsgExecuteTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgExecuteTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "messages", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 3, name: "macaroon_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteTx | PlainMessage<MsgExecuteTx> | undefined, b: MsgExecuteTx | PlainMessage<MsgExecuteTx> | undefined): boolean {
    return proto3.util.equals(MsgExecuteTx, a, b);
  }
}

/**
 * MsgExecuteTxResponse is the response type for the ExecuteTx RPC.
 *
 * @generated from message did.v1.MsgExecuteTxResponse
 */
export class MsgExecuteTxResponse extends Message<MsgExecuteTxResponse> {
  /**
   * @generated from field: string tx_hash = 1;
   */
  txHash = "";

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  constructor(data?: PartialMessage<MsgExecuteTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgExecuteTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteTxResponse | PlainMessage<MsgExecuteTxResponse> | undefined, b: MsgExecuteTxResponse | PlainMessage<MsgExecuteTxResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteTxResponse, a, b);
  }
}

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message did.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the parameters to update.
   *
   * @generated from field: did.v1.Params params = 2;
   */
  params?: Params;

  /**
   * token is the macron token to authenticate the operation.
   *
   * @generated from field: string token = 3;
   */
  token = "";

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message did.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

